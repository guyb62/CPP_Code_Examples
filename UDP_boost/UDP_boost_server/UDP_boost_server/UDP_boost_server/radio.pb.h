// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_radio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_radio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_radio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_radio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_radio_2eproto;
namespace madera {
class Phone;
struct PhoneDefaultTypeInternal;
extern PhoneDefaultTypeInternal _Phone_default_instance_;
class PhoneList;
struct PhoneListDefaultTypeInternal;
extern PhoneListDefaultTypeInternal _PhoneList_default_instance_;
}  // namespace madera
PROTOBUF_NAMESPACE_OPEN
template<> ::madera::Phone* Arena::CreateMaybeMessage<::madera::Phone>(Arena*);
template<> ::madera::PhoneList* Arena::CreateMaybeMessage<::madera::PhoneList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace madera {

enum Phone_PhoneNetwork : int {
  Phone_PhoneNetwork_VODAPHONE = 0,
  Phone_PhoneNetwork_EE = 1,
  Phone_PhoneNetwork_O2 = 2,
  Phone_PhoneNetwork_Phone_PhoneNetwork_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Phone_PhoneNetwork_Phone_PhoneNetwork_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Phone_PhoneNetwork_IsValid(int value);
constexpr Phone_PhoneNetwork Phone_PhoneNetwork_PhoneNetwork_MIN = Phone_PhoneNetwork_VODAPHONE;
constexpr Phone_PhoneNetwork Phone_PhoneNetwork_PhoneNetwork_MAX = Phone_PhoneNetwork_O2;
constexpr int Phone_PhoneNetwork_PhoneNetwork_ARRAYSIZE = Phone_PhoneNetwork_PhoneNetwork_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phone_PhoneNetwork_descriptor();
template<typename T>
inline const std::string& Phone_PhoneNetwork_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phone_PhoneNetwork>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phone_PhoneNetwork_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phone_PhoneNetwork_descriptor(), enum_t_value);
}
inline bool Phone_PhoneNetwork_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Phone_PhoneNetwork* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phone_PhoneNetwork>(
    Phone_PhoneNetwork_descriptor(), name, value);
}
enum Phone_PhoneType : int {
  Phone_PhoneType_ANDROID = 0,
  Phone_PhoneType_APPLE = 1,
  Phone_PhoneType_Phone_PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Phone_PhoneType_Phone_PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Phone_PhoneType_IsValid(int value);
constexpr Phone_PhoneType Phone_PhoneType_PhoneType_MIN = Phone_PhoneType_ANDROID;
constexpr Phone_PhoneType Phone_PhoneType_PhoneType_MAX = Phone_PhoneType_APPLE;
constexpr int Phone_PhoneType_PhoneType_ARRAYSIZE = Phone_PhoneType_PhoneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phone_PhoneType_descriptor();
template<typename T>
inline const std::string& Phone_PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phone_PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phone_PhoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phone_PhoneType_descriptor(), enum_t_value);
}
inline bool Phone_PhoneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Phone_PhoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phone_PhoneType>(
    Phone_PhoneType_descriptor(), name, value);
}
// ===================================================================

class Phone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:madera.Phone) */ {
 public:
  inline Phone() : Phone(nullptr) {}
  ~Phone() override;
  explicit constexpr Phone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Phone(const Phone& from);
  Phone(Phone&& from) noexcept
    : Phone() {
    *this = ::std::move(from);
  }

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Phone& operator=(Phone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Phone& default_instance() {
    return *internal_default_instance();
  }
  static inline const Phone* internal_default_instance() {
    return reinterpret_cast<const Phone*>(
               &_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Phone& a, Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(Phone* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Phone* New() const final {
    return new Phone();
  }

  Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Phone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Phone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Phone& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Phone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "madera.Phone";
  }
  protected:
  explicit Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Phone_PhoneNetwork PhoneNetwork;
  static constexpr PhoneNetwork VODAPHONE =
    Phone_PhoneNetwork_VODAPHONE;
  static constexpr PhoneNetwork EE =
    Phone_PhoneNetwork_EE;
  static constexpr PhoneNetwork O2 =
    Phone_PhoneNetwork_O2;
  static inline bool PhoneNetwork_IsValid(int value) {
    return Phone_PhoneNetwork_IsValid(value);
  }
  static constexpr PhoneNetwork PhoneNetwork_MIN =
    Phone_PhoneNetwork_PhoneNetwork_MIN;
  static constexpr PhoneNetwork PhoneNetwork_MAX =
    Phone_PhoneNetwork_PhoneNetwork_MAX;
  static constexpr int PhoneNetwork_ARRAYSIZE =
    Phone_PhoneNetwork_PhoneNetwork_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PhoneNetwork_descriptor() {
    return Phone_PhoneNetwork_descriptor();
  }
  template<typename T>
  static inline const std::string& PhoneNetwork_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PhoneNetwork>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PhoneNetwork_Name.");
    return Phone_PhoneNetwork_Name(enum_t_value);
  }
  static inline bool PhoneNetwork_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PhoneNetwork* value) {
    return Phone_PhoneNetwork_Parse(name, value);
  }

  typedef Phone_PhoneType PhoneType;
  static constexpr PhoneType ANDROID =
    Phone_PhoneType_ANDROID;
  static constexpr PhoneType APPLE =
    Phone_PhoneType_APPLE;
  static inline bool PhoneType_IsValid(int value) {
    return Phone_PhoneType_IsValid(value);
  }
  static constexpr PhoneType PhoneType_MIN =
    Phone_PhoneType_PhoneType_MIN;
  static constexpr PhoneType PhoneType_MAX =
    Phone_PhoneType_PhoneType_MAX;
  static constexpr int PhoneType_ARRAYSIZE =
    Phone_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PhoneType_descriptor() {
    return Phone_PhoneType_descriptor();
  }
  template<typename T>
  static inline const std::string& PhoneType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PhoneType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PhoneType_Name.");
    return Phone_PhoneType_Name(enum_t_value);
  }
  static inline bool PhoneType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PhoneType* value) {
    return Phone_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCreatedFieldNumber = 6,
    kIdFieldNumber = 1,
    kNetworkFieldNumber = 3,
    kActiveFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created = 6;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .madera.Phone.PhoneNetwork network = 3;
  void clear_network();
  ::madera::Phone_PhoneNetwork network() const;
  void set_network(::madera::Phone_PhoneNetwork value);
  private:
  ::madera::Phone_PhoneNetwork _internal_network() const;
  void _internal_set_network(::madera::Phone_PhoneNetwork value);
  public:

  // bool active = 4;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // .madera.Phone.PhoneType type = 5;
  void clear_type();
  ::madera::Phone_PhoneType type() const;
  void set_type(::madera::Phone_PhoneType value);
  private:
  ::madera::Phone_PhoneType _internal_type() const;
  void _internal_set_type(::madera::Phone_PhoneType value);
  public:

  // @@protoc_insertion_point(class_scope:madera.Phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int network_;
  bool active_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_radio_2eproto;
};
// -------------------------------------------------------------------

class PhoneList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:madera.PhoneList) */ {
 public:
  inline PhoneList() : PhoneList(nullptr) {}
  ~PhoneList() override;
  explicit constexpr PhoneList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhoneList(const PhoneList& from);
  PhoneList(PhoneList&& from) noexcept
    : PhoneList() {
    *this = ::std::move(from);
  }

  inline PhoneList& operator=(const PhoneList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneList& operator=(PhoneList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PhoneList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneList* internal_default_instance() {
    return reinterpret_cast<const PhoneList*>(
               &_PhoneList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PhoneList& a, PhoneList& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneList* New() const final {
    return new PhoneList();
  }

  PhoneList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PhoneList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PhoneList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "madera.PhoneList";
  }
  protected:
  explicit PhoneList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 1,
  };
  // repeated .madera.Phone phones = 1;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  ::madera::Phone* mutable_phones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::madera::Phone >*
      mutable_phones();
  private:
  const ::madera::Phone& _internal_phones(int index) const;
  ::madera::Phone* _internal_add_phones();
  public:
  const ::madera::Phone& phones(int index) const;
  ::madera::Phone* add_phones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::madera::Phone >&
      phones() const;

  // @@protoc_insertion_point(class_scope:madera.PhoneList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::madera::Phone > phones_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_radio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Phone

// uint32 id = 1;
inline void Phone::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Phone::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Phone::id() const {
  // @@protoc_insertion_point(field_get:madera.Phone.id)
  return _internal_id();
}
inline void Phone::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Phone::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:madera.Phone.id)
}

// string name = 2;
inline void Phone::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Phone::name() const {
  // @@protoc_insertion_point(field_get:madera.Phone.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Phone::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:madera.Phone.name)
}
inline std::string* Phone::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:madera.Phone.name)
  return _s;
}
inline const std::string& Phone::_internal_name() const {
  return name_.Get();
}
inline void Phone::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Phone::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Phone::release_name() {
  // @@protoc_insertion_point(field_release:madera.Phone.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Phone::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:madera.Phone.name)
}

// .madera.Phone.PhoneNetwork network = 3;
inline void Phone::clear_network() {
  network_ = 0;
}
inline ::madera::Phone_PhoneNetwork Phone::_internal_network() const {
  return static_cast< ::madera::Phone_PhoneNetwork >(network_);
}
inline ::madera::Phone_PhoneNetwork Phone::network() const {
  // @@protoc_insertion_point(field_get:madera.Phone.network)
  return _internal_network();
}
inline void Phone::_internal_set_network(::madera::Phone_PhoneNetwork value) {
  
  network_ = value;
}
inline void Phone::set_network(::madera::Phone_PhoneNetwork value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:madera.Phone.network)
}

// bool active = 4;
inline void Phone::clear_active() {
  active_ = false;
}
inline bool Phone::_internal_active() const {
  return active_;
}
inline bool Phone::active() const {
  // @@protoc_insertion_point(field_get:madera.Phone.active)
  return _internal_active();
}
inline void Phone::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Phone::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:madera.Phone.active)
}

// .madera.Phone.PhoneType type = 5;
inline void Phone::clear_type() {
  type_ = 0;
}
inline ::madera::Phone_PhoneType Phone::_internal_type() const {
  return static_cast< ::madera::Phone_PhoneType >(type_);
}
inline ::madera::Phone_PhoneType Phone::type() const {
  // @@protoc_insertion_point(field_get:madera.Phone.type)
  return _internal_type();
}
inline void Phone::_internal_set_type(::madera::Phone_PhoneType value) {
  
  type_ = value;
}
inline void Phone::set_type(::madera::Phone_PhoneType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:madera.Phone.type)
}

// .google.protobuf.Timestamp created = 6;
inline bool Phone::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool Phone::has_created() const {
  return _internal_has_created();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Phone::_internal_created() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Phone::created() const {
  // @@protoc_insertion_point(field_get:madera.Phone.created)
  return _internal_created();
}
inline void Phone::unsafe_arena_set_allocated_created(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:madera.Phone.created)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Phone::release_created() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Phone::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:madera.Phone.created)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Phone::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_ = p;
  }
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Phone::mutable_created() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created();
  // @@protoc_insertion_point(field_mutable:madera.Phone.created)
  return _msg;
}
inline void Phone::set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created));
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:madera.Phone.created)
}

// -------------------------------------------------------------------

// PhoneList

// repeated .madera.Phone phones = 1;
inline int PhoneList::_internal_phones_size() const {
  return phones_.size();
}
inline int PhoneList::phones_size() const {
  return _internal_phones_size();
}
inline void PhoneList::clear_phones() {
  phones_.Clear();
}
inline ::madera::Phone* PhoneList::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:madera.PhoneList.phones)
  return phones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::madera::Phone >*
PhoneList::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:madera.PhoneList.phones)
  return &phones_;
}
inline const ::madera::Phone& PhoneList::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const ::madera::Phone& PhoneList::phones(int index) const {
  // @@protoc_insertion_point(field_get:madera.PhoneList.phones)
  return _internal_phones(index);
}
inline ::madera::Phone* PhoneList::_internal_add_phones() {
  return phones_.Add();
}
inline ::madera::Phone* PhoneList::add_phones() {
  ::madera::Phone* _add = _internal_add_phones();
  // @@protoc_insertion_point(field_add:madera.PhoneList.phones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::madera::Phone >&
PhoneList::phones() const {
  // @@protoc_insertion_point(field_list:madera.PhoneList.phones)
  return phones_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace madera

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::madera::Phone_PhoneNetwork> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::madera::Phone_PhoneNetwork>() {
  return ::madera::Phone_PhoneNetwork_descriptor();
}
template <> struct is_proto_enum< ::madera::Phone_PhoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::madera::Phone_PhoneType>() {
  return ::madera::Phone_PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_radio_2eproto
